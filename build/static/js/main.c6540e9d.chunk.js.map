{"version":3,"sources":["providers/AuthProvider.js","components/TaskList.js","components/TaskCreate.js","components/TaskEdit.js","App.js","index.js"],"names":["config","apiHost","process","API_HOST","apiPort","API_PORT","AuthProvider","login","username","password","request","Request","method","body","JSON","stringify","email","headers","Headers","fetch","then","response","status","Error","statusText","json","auth","token","localStorage","setItem","logout","removeItem","Promise","resolve","checkAuth","getItem","reject","checkError","error","getPermissions","params","getIdentity","TaskList","props","List","Datagrid","TextField","source","FunctionField","render","record","statusFormatMap","EditButton","basePath","DeleteButton","OPEN","IN_PROGRESS","DONE","TaskCreate","Create","SimpleForm","redirect","TextInput","TaskEdit","Edit","disabled","SelectInput","choices","id","name","httpClient","url","options","Accept","parse","set","fetchUtils","fetchJson","App","Admin","authProvider","dataProvider","restProvider","Resource","list","create","edit","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6540e9d.chunk.js","sourcesContent":["import { config } from \"dotenv\";\r\n\r\nconfig();\r\nconst apiHost = process.env.API_HOST || \"localhost\";\r\nconst apiPort = process.env.API_PORT || \"3030\";\r\n\r\nfunction login({ username, password }) {\r\n  const request = new Request(`http://${apiHost}:${apiPort}/auth/signin`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ email: username, password }),\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n  });\r\n  return fetch(request)\r\n    .then((response) => {\r\n      if (response.status !== 200) throw new Error(response.statusText);\r\n      return response.json();\r\n    })\r\n    .then((auth) => {\r\n      // TODO review how auth tokens are stored\r\n      if (!auth.token) throw new Error(\"failed to find token on response\");\r\n      localStorage.setItem(\"auth\", JSON.stringify(auth));\r\n    });\r\n}\r\n\r\nfunction logout() {\r\n  localStorage.removeItem(\"auth\");\r\n  return Promise.resolve();\r\n}\r\n\r\nfunction checkAuth() {\r\n  return localStorage.getItem(\"auth\") ? Promise.resolve() : Promise.reject();\r\n}\r\n\r\nfunction checkError(error) {\r\n  const status = error.status;\r\n  if (status === 401 || status === 403) {\r\n    localStorage.removeItem(\"auth\");\r\n    return Promise.reject();\r\n  }\r\n  return Promise.resolve();\r\n}\r\n\r\nconst AuthProvider = {\r\n  login,\r\n  logout,\r\n  checkAuth,\r\n  checkError,\r\n  getPermissions: (params) => Promise.resolve(),\r\n  getIdentity: () => Promise.resolve(),\r\n};\r\n\r\nexport default AuthProvider;\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  TextField,\r\n  FunctionField,\r\n  EditButton,\r\n  DeleteButton,\r\n} from \"react-admin\";\r\n\r\nconst TaskList = (props) => {\r\n  return (\r\n    <List {...props}>\r\n      <Datagrid>\r\n        <TextField source=\"id\" />\r\n        <TextField source=\"title\" />\r\n        <TextField source=\"description\" />\r\n        <FunctionField\r\n          source=\"status\"\r\n          render={(record) =>\r\n            `${statusFormatMap[record.status] ?? record.status}`\r\n          }\r\n        />\r\n        <EditButton basePath=\"/tasks\" />\r\n        <DeleteButton basePath=\"/tasks\" />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n\r\nconst statusFormatMap = {\r\n  OPEN: \"Open\",\r\n  IN_PROGRESS: \"In Progress\",\r\n  DONE: \"Done\",\r\n};\r\n","import React from \"react\";\r\nimport { Create, SimpleForm, TextInput } from \"react-admin\";\r\n\r\nconst TaskCreate = (props) => {\r\n  return (\r\n    <Create {...props}>\r\n      <SimpleForm redirect=\"list\">\r\n        <TextInput source=\"title\" />\r\n        <TextInput source=\"description\" />\r\n      </SimpleForm>\r\n    </Create>\r\n  );\r\n};\r\n\r\nexport default TaskCreate;\r\n","import React from \"react\";\r\nimport { Edit, SimpleForm, TextInput, SelectInput } from \"react-admin\";\r\n\r\nconst TaskEdit = (props) => {\r\n  return (\r\n    <Edit {...props}>\r\n      <SimpleForm>\r\n        <TextInput disabled source=\"id\" />\r\n        <TextInput source=\"title\" />\r\n        <TextInput source=\"description\" />\r\n        <SelectInput\r\n          source=\"status\"\r\n          choices={[\r\n            { id: \"OPEN\", name: \"Open\" },\r\n            { id: \"IN_PROGRESS\", name: \"In Progress\" },\r\n            { id: \"DONE\", name: \"Done\" },\r\n          ]}\r\n        />\r\n      </SimpleForm>\r\n    </Edit>\r\n  );\r\n};\r\n\r\nexport default TaskEdit;\r\n","import { config } from \"dotenv\";\nimport \"./App.css\";\nimport { fetchUtils, Admin, Resource } from \"react-admin\";\nimport restProvider from \"ra-data-simple-rest\";\nimport AuthProvider from \"./providers/AuthProvider\";\nimport TaskList from \"./components/TaskList\";\nimport TaskCreate from \"./components/TaskCreate\";\nimport TaskEdit from \"./components/TaskEdit\";\n\nconfig();\nconst apiHost = process.env.API_HOST || \"localhost\";\nconst apiPort = process.env.API_PORT || \"3030\";\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) {\n    options.headers = new Headers({ Accept: \"application/json\" });\n  }\n  try {\n    const { token } = JSON.parse(localStorage.getItem(\"auth\"));\n    options.headers.set(\"Authorization\", `Bearer ${token}`);\n  } catch (error) {\n    Promise.reject();\n  }\n  return fetchUtils.fetchJson(url, options);\n};\n\nfunction App() {\n  return (\n    <Admin\n      authProvider={AuthProvider}\n      dataProvider={restProvider(`http://${apiHost}:${apiPort}`, httpClient)}\n    >\n      <Resource\n        name=\"tasks\"\n        list={TaskList}\n        create={TaskCreate}\n        edit={TaskEdit}\n      />\n    </Admin>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}